
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "missRanger"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "missRanger-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('missRanger')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("generateNA")
> ### * generateNA
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: generateNA
> ### Title: Adds Missing Values to a Vector, Matrix or Data Frame
> ### Aliases: generateNA
> 
> ### ** Examples
> 
> generateNA(1:10, p = 0.5, seed = 3345)
 [1] NA NA  3 NA  5 NA  7 NA  9 10
> generateNA(rep(Sys.Date(), 10))
 [1] "2019-06-30" "2019-06-30" "2019-06-30" "2019-06-30" "2019-06-30"
 [6] "2019-06-30" NA           "2019-06-30" "2019-06-30" "2019-06-30"
> generateNA(cbind(1:10, 10:1), p = 0.2)
      [,1] [,2]
 [1,]    1   10
 [2,]   NA    9
 [3,]    3    8
 [4,]   NA    7
 [5,]    5    6
 [6,]   NA    5
 [7,]    7    4
 [8,]    8    3
 [9,]    9   NA
[10,]   10    1
> head(generateNA(iris))
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4          NA          1.7          NA  setosa
> head(generateNA(iris, p = 0.2))
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2    <NA>
2          4.9         3.0           NA         0.2  setosa
3          4.7          NA           NA          NA  setosa
4          4.6         3.1          1.5         0.2  setosa
5           NA         3.6          1.4          NA    <NA>
6           NA         3.9           NA         0.4  setosa
> head(generateNA(iris, p = c(0, 1, 0.5, 0.5, 0.5)))
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1          NA           NA          NA  setosa
2          4.9          NA          1.4         0.2  setosa
3          4.7          NA           NA         0.2  setosa
4          4.6          NA           NA          NA    <NA>
5          5.0          NA          1.4          NA    <NA>
6          5.4          NA          1.7          NA  setosa
> head(generateNA(iris, p = c(Sepal.Length = 1)))
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1           NA         3.5          1.4         0.2  setosa
2           NA         3.0          1.4         0.2  setosa
3           NA         3.2          1.3         0.2  setosa
4           NA         3.1          1.5         0.2  setosa
5           NA         3.6          1.4         0.2  setosa
6           NA         3.9          1.7         0.4  setosa
> head(generateNA(iris, p = c(Species = 0.2, Sepal.Length = 0.5)))
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1           NA         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2    <NA>
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6           NA         3.9          1.7         0.4  setosa
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("generateNA", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("imputeUnivariate")
> ### * imputeUnivariate
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: imputeUnivariate
> ### Title: Univariate Imputation
> ### Aliases: imputeUnivariate
> 
> ### ** Examples
> 
> imputeUnivariate(c(NA, 0, 1, 0, 1))
[1] 0 0 1 0 1
> imputeUnivariate(c("A", "A", NA))
[1] "A" "A" "A"
> imputeUnivariate(as.factor(c("A", "A", NA)))
[1] A A A
Levels: A
> head(imputeUnivariate(generateNA(iris)))
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> head(imputeUnivariate(generateNA(iris), v = "Species"))
  Sepal.Length Sepal.Width Petal.Length Petal.Width   Species
1          5.1         3.5          1.4         0.2    setosa
2          4.9         3.0          1.4         0.2 virginica
3          4.7         3.2          1.3         0.2    setosa
4          4.6         3.1          1.5         0.2    setosa
5          5.0         3.6          1.4         0.2    setosa
6          5.4         3.9          1.7         0.4    setosa
> head(imputeUnivariate(generateNA(iris), v = c("Species", "Petal.Length")))
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4          NA  setosa
2          4.9         3.0          1.4         0.2  setosa
3           NA         3.2          1.3         0.2  setosa
4           NA         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("imputeUnivariate", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("missRanger")
> ### * missRanger
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: missRanger
> ### Title: missRanger
> ### Aliases: missRanger
> 
> ### ** Examples
> 
> irisWithNA <- generateNA(iris, seed = 34)
> irisImputed <- missRanger(irisWithNA, pmm.k = 3, num.trees = 100)

Missing value imputation by random forests

  Variables to impute:		Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species
  Variables used to impute:	Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species
iter 1:	.....
iter 2:	.....
iter 3:	.....
iter 4:	.....
> head(irisImputed)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> head(irisWithNA)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2    <NA>
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> 
> ## Not run: 
> ##D # With extra trees algorithm
> ##D irisImputed_et <- missRanger(irisWithNA, pmm.k = 3, num.trees = 100, splitrule = "extratrees")
> ##D head(irisImputed_et)
> ##D 
> ##D # Do not impute Species. Note: Since this variable contains missings, it won't be used
> ##D # for imputing other variables.
> ##D head(irisImputed <- missRanger(irisWithNA, . - Species ~ ., pmm.k = 3, num.trees = 100))
> ##D 
> ##D # Impute univariately only.
> ##D head(irisImputed <- missRanger(irisWithNA, . ~ 1))
> ##D 
> ##D # Use Species and Petal.Length to impute Species and Petal.Length.
> ##D head(irisImputed <- missRanger(irisWithNA, Species + Petal.Length ~ Species + Petal.Length, 
> ##D                                pmm.k = 3, num.trees = 100))
> ##D                                
> ##D # Multiple imputation: Fill data 20 times, run 20 analyses and pool their results.
> ##D require(mice)
> ##D filled <- replicate(20, missRanger(irisWithNA, verbose = 0, num.trees = 100, pmm.k = 5), 
> ##D                     simplify = FALSE)
> ##D models <- lapply(filled, function(x) lm(Sepal.Length ~ ., x))
> ##D summary(pooled_fit <- pool(models)) # Realistically inflated standard errors and p values
> ##D 
> ##D # A data set with logicals, numerics, characters and factors.
> ##D n <- 100
> ##D X <- data.frame(x1 = seq_len(n), 
> ##D                 x2 = log(seq_len(n)), 
> ##D                 x3 = sample(LETTERS[1:3], n, replace = TRUE),
> ##D                 x4 = factor(sample(LETTERS[1:3], n, replace = TRUE)),
> ##D                 x5 = seq_len(n) > 50)
> ##D head(X)
> ##D X_NA <- generateNA(X, p = seq(0, 0.8, by = .2))
> ##D head(X_NA)
> ##D 
> ##D head(X_imp <- missRanger(X_NA))
> ##D head(X_imp <- missRanger(X_NA, pmm = 3))
> ##D head(X_imp <- missRanger(X_NA, pmm = 3, verbose = 0))
> ##D head(X_imp <- missRanger(X_NA, pmm = 3, verbose = 2, returnOOB = TRUE))
> ##D attr(X_imp, "oob") # OOB prediction errors per column.
> ##D 
> ##D # The formula interface
> ##D head(X_imp <- missRanger(X_NA, x2 ~ x2 + x3, pmm = 3)) # Does not use x3 because of NAs
> ##D head(X_imp <- missRanger(X_NA, x2 + x3 ~ x2 + x3, pmm = 3))
> ##D head(X_imp <- missRanger(X_NA, x2 + x3 ~ 1, pmm = 3)) # Univariate imputation
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("missRanger", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pmm")
> ### * pmm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pmm
> ### Title: missRanger pmm
> ### Aliases: pmm
> 
> ### ** Examples
> 
> pmm(xtrain = c(0.2, 0.2, 0.8), xtest = 0.3, ytrain = c(0, 0, 1)) # 0
[1] 0
> pmm(xtrain = c(TRUE, FALSE, TRUE), xtest = FALSE, ytrain = c(2, 0, 1)) # 0
[1] 0
> pmm(xtrain = c(0.2, 0.8), xtest = 0.3, ytrain = c("A", "B"), k = 2) # "A" or "B"
[1] "B"
> pmm(xtrain = c("A", "A", "B"), xtest = "A", ytrain = c(2, 2, 4), k = 2) # 2
[1] 2
> pmm(xtrain = factor(c("A", "B")), xtest = factor("C"), ytrain = 1:2) # 2
[1] 2
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pmm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.69 0.12 1.73 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
